library(tidyverse) #load tidyverse
sessionInfo()
library(readr)
worldometer_data <- read_csv("worldometer_data.csv")
View(worldometer_data)
library(tidyverse) #load tidyverse
sessionInfo() #confirm loaded packages
library(readr) #load readr
worldometer_data <- read_csv("worldometer_data.csv") #import dataset
glimpse(worldometer_data) #look at dataset
head(worldometer_data) #check 1st few rows
srt(worldometer_data) #check structure
library(janitor) #load janitor
worldometer_data <- worldometer_data |> clean_names() #clean column names
colnames(worldometer_data)
worldometer_data <- worldometer_data |> summarise(across(everything(), ~ sum(is.na) ))
worldometer_data <- worldometer_data |> summarise(across(everything(), ~ sum(is.na)))
library(tidyverse) #load tidyverse
worldometer_data |>
summarise(across(everything(), ~ sum(is.na(.))))
worldometer_data <- worldometer_data |>
mutate(country_region = as.character(country_region),
continent = as.character(continent),
who_region = as.character(who_region))
glimpse(worldometer_data)
worldometer_data <- worldometer_data |>
mutate(across(c(new_cases, new_deaths, new_recovered, total_recovered,
active_cases, serious_critical), ~ replace_na(., 0)))
worldometer_data <- worldometer_data |> #replace with median for per million columns to prevent skewing data
mutate(across(c(tot_cases_1m_pop, deaths_1m_pop, tests_1m_pop),
~ replace_na(., median(., na.rm = TRUE))))
worldometer_data |>
summarise(across(everything(), ~ sum(is.na(.)))) #find NA values
library(tidyverse) #load tidyverse
sessionInfo() #confirm loaded packages
library(readr) #load readr
worldometer_data <- read_csv("worldometer_data.csv") #import dataset
glimpse(worldometer_data) #look at dataset
head(worldometer_data) #check 1st few rows
library(janitor) #load janitor
worldometer_data <- worldometer_data |> clean_names() #clean column names
colnames(worldometer_data)
worldometer_data |>
summarise(across(everything(), ~ sum(is.na(.)))) #find NA values
worldometer_data <- worldometer_data |> #replace NA with 0 assuming no reported cases
mutate(across(c(new_cases, new_deaths, new_recovered, total_recovered,
active_cases, serious_critical), ~ replace_na(., 0)))
worldometer_data <- worldometer_data |> #replace with median for 1m_pop columns to prevent skewing data
mutate(across(c(tot_cases_1m_pop, deaths_1m_pop, tests_1m_pop),
~ replace_na(., median(., na.rm = TRUE))))
worldometer_data |>
summarise(across(everything(), ~ sum(is.na(.)))) #find NA values
worldometer_data |>  #check for duplicate countries
count(country_region, sort = TRUE) |>
filter(n > 1)
write_csv(worldometer_data, "data/worldometer_clean.csv") #save clean dataset
write_csv(worldometer_data, "data/worldometer_clean.csv") #save clean dataset
write_csv(worldometer_data, "worldometer_clean.csv") #save clean dataset
library(readr)
worldometer_clean <- read_csv("worldometer_clean.csv")
View(worldometer_clean)
library(tidyverse) #load libraries
library(readr) #load readr
worldometer_clean <- read_csv("worldometer_clean.csv") #import dataset
glimpse(worldometer_clean) #view dataset
world_summary <- worldometer_clean |>
summarise(
total_cases = sum(total_cases, na.rm = TRUE),
total_deaths = sum(total_deaths, na.rm = TRUE),
total_recovered = sum(total_recovered, na.rm = TRUE),
World_CFR = mean((total_deaths / total_cases) * 100, na.rm = TRUE) #Case fatality rate
)
View(world_summary)
world_summary <- worldometer_clean |>
summarise(
total_new_cases = sum(new_cases, na.rm = TRUE),
total_new_deaths = sum(new_deaths, na.rm = TRUE),
total_new_recovered = sum(new_recovered, na.rm = TRUE),
total_cases = sum(total_cases, na.rm = TRUE),
total_deaths = sum(total_deaths, na.rm = TRUE),
total_recovered = sum(total_recovered, na.rm = TRUE),
World_CFR = mean((total_deaths / total_cases) * 100, na.rm = TRUE) #Case fatality rate
)
View(world_summary)
world_summary <- worldometer_clean |>
summarise(
total_new_cases = sum(new_cases, na.rm = TRUE),
total_new_deaths = sum(new_deaths, na.rm = TRUE),
total_new_recovered = sum(new_recovered, na.rm = TRUE),
total_cases = sum(total_cases, na.rm = TRUE),
total_deaths = sum(total_deaths, na.rm = TRUE),
total_recovered = sum(total_recovered, na.rm = TRUE),
World_CFR = mean((total_deaths / total_cases) * 100, na.rm = TRUE), #Case fatality rate
)
# Mortality Rate
worldometer_clean <- worldometer_clean |>
mutate (CFR = (total_deaths / total_cases) * 100,
mortality_rate_per_million = (total_deaths / population),
recovery_rate = (total_recovered / total_cases) * 100,
active_case_ratio = (active_cases / total_cases) * 100)
worldometer_clean <- worldometer_clean |>
mutate (CFR = (total_deaths / total_cases) * 100,
mortality_rate_per_million = (total_deaths / population) * 1e6,
recovery_rate = (total_recovered / total_cases) * 100,
active_case_ratio = (active_cases / total_cases) * 100)
#summary statistics
summary(worldometer_clean)
top_cases <- worldometer_clean |> arrange(desc(tot_cases_1m_pop)) |>
select(country_region, tot_cases_1m_pop, total_cases),
#Top 5 counties total cases per 1m pop cases
top_cases <- worldometer_clean |> arrange(desc(tot_cases_1m_pop)) |>
select(country_region, tot_cases_1m_pop, total_cases), |>
top_cases <- worldometer_clean |> arrange(desc(tot_cases_1m_pop)) |>
select(country_region, tot_cases_1m_pop, total_cases) |>
slice(1:5)
View(top_cases)
#top 5 countries testing per 1m pop
top_test <- worldometer_clean |> arrange(desc(tests_1m_pop)) |>
select(country_region, tests_1m_pop, total_tests) |> slice(1::5)
#top 5 countries testing per 1m pop
top_test <- worldometer_clean |> arrange(desc(tests_1m_pop)) |>
select(country_region, tests_1m_pop, total_tests) |> slice(1:5)
#top 5 countries testing per 1m pop
top_test <- worldometer_clean |> arrange(desc(tests_1m_pop)) |>
select(country_region, tests_1m_pop, total_tests) |> slice(1:5)
View(top_test)
correlation_test <- cor(worldometer_clean$tot_cases_1m_pop,
worldometer_clean$tests_1m_pop,
use = "complete.obs")
print(glue::glue("Correlation between Cases per Million and Tests per Million: {correlation_test}"))
worldometer_clean <- worldometer_clean |> #growth rate
mutate (growth_rate = (new_cases/total_cases) * 100 )
top_countries_spread <- worldometer_clean |>
arrange(desc(growth_rate)) |> select(country_region, total_cases, new_cases, growth_rate) |> slice(1:5)
View(top_cases)
View(top_countries_spread)
cor_recovery_CFR <- cor(worldometer_clean$recovery_rate, worldometer_clean$CFR,
use = "complete.obs")
#correlation between testing and cases
cor_case_test <- cor(worldometer_clean$tot_cases_1m_pop,
worldometer_clean$tests_1m_pop,
use = "complete.obs")
write_csv(worldometer_clean, "processed_worldometer_data.csv") #new dataset
write_csv(world_summary, "data/world_summary.csv")
write_csv(worldometer_clean, "processed_worldometer_data.csv") #new dataset
install.packages("usethis")
